import "antd/es/space/style";
import _Space from "antd/es/space";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from 'react';
import { ConfigContext } from 'antd/lib/config-provider';
import FieldContext from '../../FieldContext';
import './index.less';

var Group = function Group(props) {
  var _React$useContext = React.useContext(FieldContext),
      groupProps = _React$useContext.groupProps;

  var _groupProps$props = _objectSpread(_objectSpread({}, groupProps), props),
      children = _groupProps$props.children,
      style = _groupProps$props.style,
      title = _groupProps$props.title,
      titleStyle = _groupProps$props.titleStyle,
      titleRender = _groupProps$props.titleRender;

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var className = getPrefixCls('pro-form-group');
  return /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(className, "-title"),
    style: titleStyle
  }, titleRender ? titleRender(title, props) : title), /*#__PURE__*/React.createElement(_Space, {
    className: "".concat(className, "-container"),
    size: 32
  }, children));
};

export default Group;