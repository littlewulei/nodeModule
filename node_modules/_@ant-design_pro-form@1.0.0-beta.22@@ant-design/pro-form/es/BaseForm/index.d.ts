import React, { ReactElement } from 'react';
import { FormProps, FormInstance } from 'antd/lib/form/Form';
import { FormItemProps } from 'antd/lib/form';
import { TooltipProps } from 'antd/lib/tooltip';
import { ProFieldValueType } from '@ant-design/pro-field';
import { SubmitterProps } from '../components/Submitter';
import { GroupProps, FieldProps, ProFormItemProps } from '../interface';
export interface CommonFormProps {
    submitter?: Omit<SubmitterProps, 'form'> | boolean;
}
export interface BaseFormProps extends FormProps, CommonFormProps {
    contentRender?: (items: React.ReactNode[], submitter: ReactElement<Omit<SubmitterProps, 'form'>> | undefined) => React.ReactNode;
    fieldProps?: FieldProps;
    dateFormatter?: 'number' | 'string' | false;
    formItemProps?: FormItemProps;
    groupProps?: GroupProps;
    formRef?: React.MutableRefObject<FormInstance | undefined>;
}
export interface ExtendsProps {
    secondary?: boolean;
    bordered?: boolean;
    colSize?: number;
    tip?: string | TooltipProps;
}
declare type ProFormComponent<P, ExtendsProps> = React.ComponentType<Omit<P & ExtendsProps, 'proFieldProps'>>;
export declare type ProFormItemCreateConfig = {
    valueType?: ProFieldValueType;
    customLightMode?: boolean;
    lightFilterLabelFormatter?: (value: any) => string;
} & FormItemProps;
export declare function createField<P extends ProFormItemProps = any>(Field: React.ComponentType<P> | React.ForwardRefExoticComponent<P>, config?: ProFormItemCreateConfig): ProFormComponent<P, ExtendsProps>;
declare const BaseForm: React.FC<BaseFormProps>;
export default BaseForm;
